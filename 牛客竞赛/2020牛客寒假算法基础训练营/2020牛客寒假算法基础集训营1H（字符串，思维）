#include<algorithm>
#include<iostream>
#include<cstring>
#include<cstdio>
#include<fstream>
#include<string>
#include<vector>
#include<cmath>
#include<queue>
#include<map>
#include<set>
//#include<bits/stdc++.h>
#define INF 0x7f7f7f7f //2139062143
#define INF1 0x3f3f3f3f //1061109567
#define INF2 2147483647
#define llINF 9223372036854775807
#define pi 3.141592653589793//23846264338327950254
#define pb push_back
#define ll long long
//freopen(".in","r",stdin);
//freopen(".out","w",stdout);
//ifstream f1(".txt");
//ofstream f2(".txt");
//ios::sync_with_stdio(false);
//cin.tie(0);
using namespace std;
#define local
#ifdef local
#endif
const int maxn=INF;

//题意为一个只含有0和1的字符串，每次操作可以把一个0变成1或者把一个1变成0
//提问最多k次操作后，最长的连续子串是多少（该子串只含有1或只含有0）

//one数组记录下每个1出现的下标，zero数组记录下每个0出现的下标
//k次操作的话假设我们找寻到的1是第i个1和第i+k个1，那么我们把第i到底i+k-1个1变成0，最长的由0构成的连续子串左边界为第i-1个1的右侧，右边界为第i+k个1的左侧

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    ll n,k;
    char s[200010];
    cin>>n>>k;
    cin.get();
    cin.getline(s,200010);
    deque<ll>zero,one;
    ll ans=0;
    zero.pb(-1);//注意这里和下方要压入左右两个边界值
    one.pb(-1);
    for(ll i=0;i<n;i++)
    {
        if(s[i]=='1') one.pb(i);
        else if(s[i]=='0') zero.pb(i);
        //if(one.size()>k) break;
    }
    zero.pb(n);
    one.pb(n);
    if(one.size()-2<=k) ans=n;
    else
    {
        for(ll i=1;i+k<one.size();i++)
            ans=max(ans,one[i+k]-1-one[i-1]);
    }
    if(zero.size()-2<=k) ans=n;
    else
    {
        for(ll i=1;i+k<zero.size();i++)
            ans=max(ans,zero[i+k]-1-zero[i-1]);
    }
     
    cout<<ans<<endl;
}
