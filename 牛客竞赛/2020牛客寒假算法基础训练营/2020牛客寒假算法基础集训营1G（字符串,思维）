#include<algorithm>
#include<iostream>
#include<cstring>
#include<cstdio>
#include<fstream>
#include<string>
#include<vector>
#include<cmath>
#include<queue>
#include<map>
#include<set>
//#include<bits/stdc++.h>
#define INF 0x7f7f7f7f //2139062143
#define INF1 0x3f3f3f3f //1061109567
#define INF2 2147483647
#define llINF 9223372036854775807
#define pi 3.141592653589793//23846264338327950254
#define pb push_back
#define ll long long
//freopen(".in","r",stdin);
//freopen(".out","w",stdout);
//ifstream f1(".txt");
//ofstream f2(".txt");
//ios::sync_with_stdio(false);
//cin.tie(0);
using namespace std;
#define local
#ifdef local
#endif
const int maxn=INF;

//题意为一个仅由小写字母组成的字符串，截取一个子串，至少包含k个相同的某一个字母
//询问该子串的最小长度是多少

//用ch[i]数组记录对应字母出现位置的下标
//对每一个字母进行一次遍历，循环比较由第j+1个该字母到第j+k个该字母所构成的子串长度与ans即可

ll n,k;
char s[200010];
vector<ll>ch[26];

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin>>n>>k;
    cin.get();
    cin.getline(s,200010);
    for(ll i=0;i<n;i++)
    {
        ch[s[i]-'a'].pb(i);
    }
    ll ans=llINF;
    for(ll i=0;i<26;i++)
    {
        if(ch[i].size()>=k)
        {
            for(ll j=0;j+k<=ch[i].size();j++)
            {
                ans=min(ans,ch[i][j+k-1]-ch[i][j]+1);
            }
        }
    }
    if(ans==llINF) cout<<-1<<endl;
    else cout<<ans<<endl;
}




