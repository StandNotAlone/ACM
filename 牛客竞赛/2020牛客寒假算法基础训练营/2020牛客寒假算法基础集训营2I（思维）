#include<algorithm>
#include<iostream>
#include<cstring>
#include<fstream>
#include<iomanip>
#include<cstdio>
#include<string>
#include<vector>
#include<cmath>
#include<queue>
#include<map>
#include<set>
//#include<bits/stdc++.h>
#define INF 0x7f7f7f7f //2139062143
#define INF1 0x3f3f3f3f //1061109567
#define INF2 2147483647
#define llINF 9223372036854775807
#define pi 3.141592653589793//23846264338327950254
#define pb push_back
#define ll long long
//freopen(".in","r",stdin);
//freopen(".out","w",stdout);
//ifstream f1(".txt");
//ofstream f2(".txt");
//ios::sync_with_stdio(false);
//cin.tie(0);
using namespace std;
#define local
#ifdef local
#endif
const int maxn=INF;

//这道题大概是cf div2 B题这种难度的思维...比赛时看过的人少连题面都没看，教训

//题意为有n个星球（<=2e5），每个星球有一个权值v[i](0<=v[i]<2^30)
//现在要将这n个星球连通起来，对星球i和星球j构造通道的消耗是lowbit(v[i]$v[j])
//$运算为对两个数的同一二进制位上进行异或运算，lowbit为寻找该数中最低位的那个1所对应的值
//例如lowbit（5)=1,lowbit(8)=8,lowbit(24)=8

//对于权值相等的星球，在这两个星球间建立通道消耗为0，c因此先对所有星球进行一次去重处理
//然后就是lowbit这个操作，是找最低的那一位1，对于最低的1，也就是2^0=1，如果对所有剩余的m个星球的权值这一位既存在1又存在0，那么剩下的m个星球就一定可以互相连通起来，1和0连通，1和1还要0和0可以避开，那么每条通道的消耗就是1
//答案就是1*（m-1），如果这位只有0或者只有1则代表最小的1不可能是这一位。最小的1要向上推一位，依次类推，也就是我们只需要从最低位向高位寻找第一位出现的既有1又有0的那一位即可。

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    ll n;
    cin>>n;
    vector<ll>num(n);
    for(auto &x:num)
        cin>>x;
    sort(num.begin(),num.end());
    vector<ll>nnum;
    for(ll i=0;i<n;)
    {
        ll x=num[i];
        nnum.pb(x);
        i++;
        while(i<n&&num[i]==x) i++;
    }
    if(nnum.size()==1) cout<<0<<endl;
    else
    {
        for(ll i=0;i<30;i++)
        {
            ll flag1=0,flag2=0;
            for(ll j=0;j<nnum.size();j++)
            {
                if((nnum[j]>>i)&1) flag1=1;
                else flag2=1;
            }
            if(flag1&&flag2)
            {
                cout<<(nnum.size()-1)*(1<<i)<<endl;
                break;
            }
        }
    }
    
}



